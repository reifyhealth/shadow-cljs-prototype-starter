{
"version":3,
"file":"module$node_modules$lodash$_createPadding.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,yCAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAAA,IAClGC,WAAaH,OAAA,CAAQ,wCAAR,CADqF,CAElGI,aAAeJ,OAAA,CAAQ,0CAAR,CAFmF,CAGlGK,UAAYL,OAAA,CAAQ,uCAAR,CAHsF,CAIlGM,WAAaN,OAAA,CAAQ,wCAAR,CAJqF,CAKlGO,WAAaP,OAAA,CAAQ,wCAAR,CALqF,CAMlGQ,cAAgBR,OAAA,CAAQ,2CAAR,CANkF,CASlGS,WAAaC,IAAKC,CAAAA,IAwBtBV,OAAOC,CAAAA,OAAP;AAbAU,QAAsB,CAACC,MAAD,CAASC,KAAT,CAAgB,CACpCA,KAAA,CAAkBC,IAAAA,EAAV,GAAAD,KAAA,CAAsB,GAAtB,CAA4BV,YAAA,CAAaU,KAAb,CAEpC,KAAIE,YAAcF,KAAMD,CAAAA,MACxB,IAAkB,CAAlB,CAAIG,WAAJ,CACE,MAAOA,YAAA,CAAcb,UAAA,CAAWW,KAAX,CAAkBD,MAAlB,CAAd,CAA0CC,KAE/CG,YAAAA,CAASd,UAAA,CAAWW,KAAX,CAAkBL,UAAA,CAAWI,MAAX,CAAoBN,UAAA,CAAWO,KAAX,CAApB,CAAlB,CACb,OAAOR,WAAA,CAAWQ,KAAX,CAAA,CACHT,SAAA,CAAUG,aAAA,CAAcS,WAAd,CAAV,CAAiC,CAAjC,CAAoCJ,MAApC,CAA4CK,CAAAA,IAA5C,CAAiD,EAAjD,CADG,CAEHD,WAAOE,CAAAA,KAAP,CAAa,CAAb,CAAgBN,MAAhB,CAVgC,CApBgE;",
"sources":["node_modules/lodash/_createPadding.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_createPadding\"] = function(global,require,module,exports) {\nvar baseRepeat = require('./_baseRepeat'),\n    baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    stringSize = require('./_stringSize'),\n    stringToArray = require('./_stringToArray');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil;\n\n/**\n * Creates the padding for `string` based on `length`. The `chars` string\n * is truncated if the number of characters exceeds `length`.\n *\n * @private\n * @param {number} length The padding length.\n * @param {string} [chars=' '] The string used as padding.\n * @returns {string} Returns the padding for `string`.\n */\nfunction createPadding(length, chars) {\n  chars = chars === undefined ? ' ' : baseToString(chars);\n\n  var charsLength = chars.length;\n  if (charsLength < 2) {\n    return charsLength ? baseRepeat(chars, length) : chars;\n  }\n  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n  return hasUnicode(chars)\n    ? castSlice(stringToArray(result), 0, length).join('')\n    : result.slice(0, length);\n}\n\nmodule.exports = createPadding;\n\n};"],
"names":["shadow$provide","global","require","module","exports","baseRepeat","baseToString","castSlice","hasUnicode","stringSize","stringToArray","nativeCeil","Math","ceil","createPadding","length","chars","undefined","charsLength","result","join","slice"]
}
