shadow$provide.module$node_modules$rc_select$lib$utils$warningPropsUtil=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard");module=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _typeof2=module(require("module$node_modules$$babel$runtime$helpers$typeof")),React=global(require("module$node_modules$react$index")),_warning=
global(require("module$node_modules$rc_util$lib$warning")),_toArray=module(require("module$node_modules$rc_util$lib$Children$toArray")),_legacyUtil=require("module$node_modules$rc_select$lib$utils$legacyUtil"),_commonUtil=require("module$node_modules$rc_select$lib$utils$commonUtil");exports.default=function(props){var mode=props.mode,children=props.children,backfill=props.backfill,allowClear=props.allowClear,placeholder=props.placeholder,getInputElement=props.getInputElement,showSearch=props.showSearch,
onSearch=props.onSearch,defaultOpen=props.defaultOpen,autoFocus=props.autoFocus,labelInValue=props.labelInValue,value=props.value,inputValue=props.inputValue,optionLabelProp=props.optionLabelProp,multiple="multiple"===mode||"tags"===mode;showSearch=void 0!==showSearch?showSearch:multiple||"combobox"===mode;props=props.options||(0,_legacyUtil.convertChildrenToData)(children);(0,_warning.default)("tags"!==mode||props.every(function(opt){return!opt.disabled}),"Please avoid setting option to disabled in tags mode since user can always type text as tag.");
if("tags"===mode||"combobox"===mode)props=props.some(function(item){return item.options?item.options.some(function(opt){return"number"===typeof("value"in opt?opt.value:opt.key)}):"number"===typeof("value"in item?item.value:item.key)}),(0,_warning.default)(!props,"`value` of Option should not use number type when `mode` is `tags` or `combobox`.");(0,_warning.default)("combobox"!==mode||!optionLabelProp,"`combobox` mode not support `optionLabelProp`. Please set `value` on Option directly.");(0,_warning.default)("combobox"===
mode||!backfill,"`backfill` only works with `combobox` mode.");(0,_warning.default)("combobox"===mode||!getInputElement,"`getInputElement` only work with `combobox` mode.");(0,_warning.noteOnce)("combobox"!==mode||!getInputElement||!allowClear||!placeholder,"Customize `getInputElement` should customize clear and placeholder logic instead of configuring `allowClear` and `placeholder`.");onSearch&&!showSearch&&"combobox"!==mode&&"tags"!==mode&&(0,_warning.default)(!1,"`onSearch` should work with `showSearch` instead of use alone.");
(0,_warning.noteOnce)(!defaultOpen||autoFocus,"`defaultOpen` makes Select open without focus which means it will not close by click outside. You can set `autoFocus` if needed.");void 0!==value&&null!==value&&(mode=(0,_commonUtil.toArray)(value),(0,_warning.default)(!labelInValue||mode.every(function(val){return"object"===(0,_typeof2.default)(val)&&("key"in val||"value"in val)}),"`value` should in shape of `{ value: string | number, label?: ReactNode }` when you set `labelInValue` to `true`"),(0,_warning.default)(!multiple||
Array.isArray(value),"`value` should be array when `mode` is `multiple` or `tags`"));if(children){var invalidateChildType=null;(0,_toArray.default)(children).some(function(node){if(!React.isValidElement(node)||!node.type)return!1;var type=node.type;if(type.isSelectOption)return!1;if(type.isSelectOptGroup)return(0,_toArray.default)(node.props.children).every(function(subNode){if(!React.isValidElement(subNode)||!node.type||subNode.type.isSelectOption)return!0;invalidateChildType=subNode.type;return!1})?
!1:!0;invalidateChildType=type;return!0});invalidateChildType&&(0,_warning.default)(!1,"`children` should be `Select.Option` or `Select.OptGroup` instead of `".concat(invalidateChildType.displayName||invalidateChildType.name||invalidateChildType,"`."));(0,_warning.default)(void 0===inputValue,"`inputValue` is deprecated, please use `searchValue` instead.")}}}
//# sourceMappingURL=module$node_modules$rc_select$lib$utils$warningPropsUtil.js.map
