{
"version":3,
"file":"module$node_modules$rc_tree_select$lib$hooks$useTreeData.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/rc-tree-select/lib/hooks/useTreeData.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$rc_tree_select$lib$hooks$useTreeData\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useTreeData;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _warning = _interopRequireDefault(require(\"rc-util/lib/warning\"));\n\nvar _legacyUtil = require(\"../utils/legacyUtil\");\n\nvar MAX_WARNING_TIMES = 10;\n\nfunction parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = (0, _objectSpread2.default)({}, node);\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Format `treeData` with `value` & `key` which is used for calculation\n */\n\n\nfunction formatTreeData(treeData, getLabelProp) {\n  var warningTimes = 0;\n  var valueSet = new Set();\n\n  function dig(dataNodes) {\n    return (dataNodes || []).map(function (node) {\n      var key = node.key,\n          value = node.value,\n          children = node.children,\n          rest = (0, _objectWithoutProperties2.default)(node, [\"key\", \"value\", \"children\"]);\n      var mergedValue = 'value' in node ? value : key;\n      var dataNode = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, rest), {}, {\n        key: key !== null && key !== undefined ? key : mergedValue,\n        value: mergedValue,\n        title: getLabelProp(node)\n      }); // Check `key` & `value` and warning user\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (key !== null && key !== undefined && value !== undefined && String(key) !== String(value) && warningTimes < MAX_WARNING_TIMES) {\n          warningTimes += 1;\n          (0, _warning.default)(false, \"`key` or `value` with TreeNode must be the same or you can remove one of them. key: \".concat(key, \", value: \").concat(value, \".\"));\n        }\n\n        (0, _warning.default)(!valueSet.has(value), \"Same `value` exist in the tree: \".concat(value));\n        valueSet.add(value);\n      }\n\n      if ('children' in node) {\n        dataNode.children = dig(children);\n      }\n\n      return dataNode;\n    });\n  }\n\n  return dig(treeData);\n}\n/**\n * Convert `treeData` or `children` into formatted `treeData`.\n * Will not re-calculate if `treeData` or `children` not change.\n */\n\n\nfunction useTreeData(treeData, children, _ref2) {\n  var getLabelProp = _ref2.getLabelProp,\n      simpleMode = _ref2.simpleMode;\n  var cacheRef = React.useRef({});\n\n  if (treeData) {\n    cacheRef.current.formatTreeData = cacheRef.current.treeData === treeData ? cacheRef.current.formatTreeData : formatTreeData(simpleMode ? parseSimpleTreeData(treeData, (0, _objectSpread2.default)({\n      id: 'id',\n      pId: 'pId',\n      rootPId: null\n    }, simpleMode !== true ? simpleMode : {})) : treeData, getLabelProp);\n    cacheRef.current.treeData = treeData;\n  } else {\n    cacheRef.current.formatTreeData = cacheRef.current.children === children ? cacheRef.current.formatTreeData : formatTreeData((0, _legacyUtil.convertChildrenToData)(children), getLabelProp);\n  }\n\n  return cacheRef.current.formatTreeData;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","parseSimpleTreeData","treeData","_ref","id","pId","rootPId","keyNodes","rootNodeList","nodeList","map","node","clone","_objectSpread2","default","key","forEach","parentKey","parent","children","push","formatTreeData","getLabelProp","dig","dataNodes","value","rest","_objectWithoutProperties2","mergedValue","dataNode","undefined","title","String","warningTimes","MAX_WARNING_TIMES","_warning","concat","valueSet","has","add","Set","_interopRequireWildcard","_interopRequireDefault","Object","defineProperty","useTreeData","_ref2","simpleMode","cacheRef","React","useRef","current","_legacyUtil","convertChildrenToData"]
}
