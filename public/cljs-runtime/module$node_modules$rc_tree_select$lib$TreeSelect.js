shadow$provide.module$node_modules$rc_tree_select$lib$TreeSelect=function(global,require,module,exports){module=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard");global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _classCallCheck2=global(require("module$node_modules$$babel$runtime$helpers$classCallCheck")),_createClass2=global(require("module$node_modules$$babel$runtime$helpers$createClass")),
_inherits2=global(require("module$node_modules$$babel$runtime$helpers$inherits")),_createSuper2=global(require("module$node_modules$$babel$runtime$helpers$createSuper")),_extends2=global(require("module$node_modules$$babel$runtime$helpers$extends")),_toConsumableArray2=global(require("module$node_modules$$babel$runtime$helpers$toConsumableArray")),_typeof2=global(require("module$node_modules$$babel$runtime$helpers$typeof")),_slicedToArray2=global(require("module$node_modules$$babel$runtime$helpers$slicedToArray")),
_objectSpread2=global(require("module$node_modules$$babel$runtime$helpers$objectSpread2")),React=module(require("module$node_modules$react$index")),_generate=global(require("module$node_modules$rc_select$lib$generate")),_valueUtil=require("module$node_modules$rc_select$lib$utils$valueUtil"),_treeUtil=require("module$node_modules$rc_tree$lib$utils$treeUtil"),_conductUtil=require("module$node_modules$rc_tree$lib$utils$conductUtil"),_generator=require("module$node_modules$rc_select$lib$interface$generator"),
_useMergedState3=global(require("module$node_modules$rc_util$lib$hooks$useMergedState")),_warning=global(require("module$node_modules$rc_util$lib$warning")),_OptionList=global(require("module$node_modules$rc_tree_select$lib$OptionList"));module=global(require("module$node_modules$rc_tree_select$lib$TreeNode"));var _valueUtil2=require("module$node_modules$rc_tree_select$lib$utils$valueUtil"),_warningPropsUtil=global(require("module$node_modules$rc_tree_select$lib$utils$warningPropsUtil")),_Context=
require("module$node_modules$rc_tree_select$lib$Context"),_useTreeData=global(require("module$node_modules$rc_tree_select$lib$hooks$useTreeData")),_useKeyValueMap3=global(require("module$node_modules$rc_tree_select$lib$hooks$useKeyValueMap")),_useKeyValueMapping3=global(require("module$node_modules$rc_tree_select$lib$hooks$useKeyValueMapping")),_strategyUtil=require("module$node_modules$rc_tree_select$lib$utils$strategyUtil"),_legacyUtil=require("module$node_modules$rc_tree_select$lib$utils$legacyUtil"),
_useSelectValues=global(require("module$node_modules$rc_tree_select$lib$hooks$useSelectValues")),OMIT_PROPS="expandedKeys treeData treeCheckable showCheckedStrategy searchPlaceholder treeLine treeIcon showTreeIcon switcherIcon treeNodeFilterProp filterTreeNode dropdownPopupAlign treeDefaultExpandAll treeCheckStrictly treeExpandedKeys treeLoadedKeys treeMotion onTreeExpand onTreeLoad loadData treeDataSimpleMode treeNodeLabelProp treeDefaultExpandedKeys".split(" "),RefSelect=(0,_generate.default)({prefixCls:"rc-tree-select",
components:{optionList:_OptionList.default},convertChildrenToData:function(){return null},flattenOptions:_valueUtil2.flattenOptions,getLabeledValue:_valueUtil.getLabeledValue,filterOptions:_valueUtil2.filterOptions,isValueDisabled:_valueUtil2.isValueDisabled,findValueOption:_valueUtil2.findValueOption,omitDOMProps:function(props){var cloneProps=(0,_objectSpread2.default)({},props);OMIT_PROPS.forEach(function(prop){delete cloneProps[prop]});return cloneProps}});RefSelect.displayName="Select";var RefTreeSelect=
React.forwardRef(function(props,ref){var treeCheckable=props.treeCheckable,treeCheckStrictly=props.treeCheckStrictly,_props$showCheckedStr=props.showCheckedStrategy,showCheckedStrategy=void 0===_props$showCheckedStr?"SHOW_CHILD":_props$showCheckedStr,labelInValue=props.labelInValue;_props$showCheckedStr=props.loadData;var treeLoadedKeys=props.treeLoadedKeys,_props$treeNodeFilter=props.treeNodeFilterProp;_props$treeNodeFilter=void 0===_props$treeNodeFilter?"value":_props$treeNodeFilter;var treeNodeLabelProp=
props.treeNodeLabelProp,treeDataSimpleMode=props.treeDataSimpleMode,treeData=props.treeData,treeExpandedKeys=props.treeExpandedKeys,treeDefaultExpandedKeys=props.treeDefaultExpandedKeys,treeDefaultExpandAll=props.treeDefaultExpandAll,children=props.children,treeIcon=props.treeIcon,showTreeIcon=props.showTreeIcon,switcherIcon=props.switcherIcon,treeLine=props.treeLine,treeMotion=props.treeMotion,filterTreeNode=props.filterTreeNode,dropdownPopupAlign=props.dropdownPopupAlign,onChange=props.onChange,
onTreeExpand=props.onTreeExpand,onTreeLoad=props.onTreeLoad,onDropdownVisibleChange=props.onDropdownVisibleChange,onSelect=props.onSelect,onDeselect=props.onDeselect,mergedCheckable=treeCheckable||treeCheckStrictly,mergedMultiple=props.multiple||mergedCheckable,treeConduction=treeCheckable&&!treeCheckStrictly,mergedLabelInValue=treeCheckStrictly||labelInValue,selectRef=React.useRef(null);React.useImperativeHandle(ref,function(){return{scrollTo:selectRef.current.scrollTo,focus:selectRef.current.focus,
blur:selectRef.current.blur}});var getTreeNodeTitle=function(node){return treeData?node.label||node.title:node.title},getTreeNodeLabelProp=function(node){return treeNodeLabelProp?node[treeNodeLabelProp]:getTreeNodeTitle(node)},mergedTreeData=(0,_useTreeData.default)(treeData,children,{getLabelProp:getTreeNodeTitle,simpleMode:treeDataSimpleMode});ref=(0,React.useMemo)(function(){return(0,_valueUtil2.flattenOptions)(mergedTreeData)},[mergedTreeData]);ref=(0,_useKeyValueMap3.default)(ref);labelInValue=
(0,_slicedToArray2.default)(ref,2);ref=labelInValue[0];labelInValue=labelInValue[1];ref=(0,_useKeyValueMapping3.default)(ref,labelInValue);ref=(0,_slicedToArray2.default)(ref,2);var getEntityByKey=ref[0],getEntityByValue=ref[1],conductKeyEntities=(0,React.useMemo)(function(){return treeConduction?(0,_treeUtil.convertDataToEntities)(mergedTreeData):{keyEntities:null}},[mergedTreeData,treeCheckable,treeCheckStrictly]).keyEntities;ref=(0,_useMergedState3.default)(props.defaultValue,{value:props.value});
ref=(0,_slicedToArray2.default)(ref,2);var value=ref[0],setValue=ref[1],splitRawValues=function(newRawValues){var missingRawValues=[],existRawValues=[];newRawValues.forEach(function(val){getEntityByValue(val)?existRawValues.push(val):missingRawValues.push(val)});return{missingRawValues:missingRawValues,existRawValues:existRawValues}};treeCheckable=(0,React.useMemo)(function(){var valueHalfCheckedKeys=[],newRawValues=[];(0,_valueUtil2.toArray)(value).forEach(function(item){if(item&&"object"===(0,_typeof2.default)(item)&&
"value"in item)if(item.halfChecked&&treeCheckStrictly){var entity=getEntityByValue(item.value);valueHalfCheckedKeys.push(entity?entity.key:item.value)}else newRawValues.push(item.value);else newRawValues.push(item)});if(treeConduction){var _splitRawValues=splitRawValues(newRawValues),missingRawValues=_splitRawValues.missingRawValues;_splitRawValues=_splitRawValues.existRawValues.map(function(val){return getEntityByValue(val).key});var _conductCheck=(0,_conductUtil.conductCheck)(_splitRawValues,!0,
conductKeyEntities);_splitRawValues=_conductCheck.checkedKeys;_conductCheck=_conductCheck.halfCheckedKeys;return[[].concat((0,_toConsumableArray2.default)(missingRawValues),(0,_toConsumableArray2.default)(_splitRawValues.map(function(key){return getEntityByKey(key).data.value}))),_conductCheck]}return[newRawValues,valueHalfCheckedKeys]},[value,mergedMultiple,mergedLabelInValue,treeCheckable,treeCheckStrictly]);treeCheckable=(0,_slicedToArray2.default)(treeCheckable,2);var rawValues=treeCheckable[0],
rawHalfCheckedKeys=treeCheckable[1],selectValues=(0,_useSelectValues.default)(rawValues,{treeConduction:treeConduction,value:value,showCheckedStrategy:showCheckedStrategy,conductKeyEntities:conductKeyEntities,getEntityByValue:getEntityByValue,getEntityByKey:getEntityByKey,getLabelProp:getTreeNodeLabelProp}),triggerChange=function(newRawValues,extra,source){setValue(mergedMultiple?newRawValues:newRawValues[0]);if(onChange){var eventValues=newRawValues;if(treeConduction&&"SHOW_ALL"!==showCheckedStrategy){var keyList=
newRawValues.map(function(val){var entity=getEntityByValue(val);return entity?entity.key:val});eventValues=(0,_strategyUtil.formatStrategyKeys)(keyList,showCheckedStrategy,conductKeyEntities).map(function(key){var entity=getEntityByKey(key);return entity?entity.data.value:key})}keyList=extra||{triggerValue:void 0,selected:void 0};extra=keyList.triggerValue;keyList=keyList.selected;var returnValues=mergedLabelInValue?(0,_valueUtil2.getRawValueLabeled)(eventValues,value,getEntityByValue,getTreeNodeLabelProp):
eventValues;if(treeCheckStrictly){var halfValues=rawHalfCheckedKeys.map(function(key){var entity=getEntityByKey(key);return entity?entity.data.value:key}).filter(function(val){return!eventValues.includes(val)});returnValues=[].concat((0,_toConsumableArray2.default)(returnValues),(0,_toConsumableArray2.default)((0,_valueUtil2.getRawValueLabeled)(halfValues,value,getEntityByValue,getTreeNodeLabelProp)))}halfValues={preValue:selectValues,triggerValue:extra};var showPosition=!0;if(treeCheckStrictly||
"selection"===source&&!keyList)showPosition=!1;(0,_legacyUtil.fillAdditionalInfo)(halfValues,extra,newRawValues,mergedTreeData,showPosition);mergedCheckable?halfValues.checked=keyList:halfValues.selected=keyList;onChange(mergedMultiple?returnValues:returnValues[0],mergedLabelInValue?null:eventValues.map(function(val){return(val=getEntityByValue(val))?getTreeNodeLabelProp(val.data):null}),halfValues)}};treeCheckable=React.useCallback(function(open){if(onDropdownVisibleChange){var legacyParam={};Object.defineProperty(legacyParam,
"documentClickClose",{get:function(){(0,_warning.default)(!1,"Second param of `onDropdownVisibleChange` has been removed.");return!1}});onDropdownVisibleChange(open,legacyParam)}},[onDropdownVisibleChange]);(0,_warningPropsUtil.default)(props);dropdownPopupAlign={optionLabelProp:null,optionFilterProp:_props$treeNodeFilter,dropdownAlign:dropdownPopupAlign,internalProps:{mark:_generator.INTERNAL_PROPS_MARK,onClear:function(){triggerChange([],null,"clear")},skipTriggerChange:!0,skipTriggerSelect:!0,
onRawSelect:function(selectValue,option,source){if(mergedMultiple){var newRawValues=(0,_valueUtil2.addValue)(rawValues,selectValue);if(treeConduction){var _splitRawValues2=splitRawValues(newRawValues);newRawValues=_splitRawValues2.missingRawValues;_splitRawValues2=_splitRawValues2.existRawValues.map(function(val){return getEntityByValue(val).key});_splitRawValues2=(0,_conductUtil.conductCheck)(_splitRawValues2,!0,conductKeyEntities).checkedKeys;newRawValues=[].concat((0,_toConsumableArray2.default)(newRawValues),
(0,_toConsumableArray2.default)(_splitRawValues2.map(function(key){return getEntityByKey(key).data.value})))}triggerChange(newRawValues,{selected:!0,triggerValue:selectValue},source)}else triggerChange([selectValue],{selected:!0,triggerValue:selectValue},source);onSelect&&onSelect(selectValue,option)},onRawDeselect:function(selectValue,option,source){var newRawValues=(0,_valueUtil2.removeValue)(rawValues,selectValue);if(treeConduction){var _splitRawValues3=splitRawValues(newRawValues);newRawValues=
_splitRawValues3.missingRawValues;_splitRawValues3=_splitRawValues3.existRawValues.map(function(val){return getEntityByValue(val).key});_splitRawValues3=(0,_conductUtil.conductCheck)(_splitRawValues3,{checked:!1,halfCheckedKeys:rawHalfCheckedKeys},conductKeyEntities).checkedKeys;newRawValues=[].concat((0,_toConsumableArray2.default)(newRawValues),(0,_toConsumableArray2.default)(_splitRawValues3.map(function(key){return getEntityByKey(key).data.value})))}triggerChange(newRawValues,{selected:!1,triggerValue:selectValue},
source);onDeselect&&onDeselect(selectValue,option)}}};"filterTreeNode"in props&&(dropdownPopupAlign.filterOption=filterTreeNode);return React.createElement(_Context.SelectContext.Provider,{value:{checkable:mergedCheckable,loadData:_props$showCheckedStr,treeLoadedKeys:treeLoadedKeys,onTreeLoad:onTreeLoad,checkedKeys:rawValues,halfCheckedKeys:rawHalfCheckedKeys,treeDefaultExpandAll:treeDefaultExpandAll,treeExpandedKeys:treeExpandedKeys,treeDefaultExpandedKeys:treeDefaultExpandedKeys,onTreeExpand:onTreeExpand,
treeIcon:treeIcon,treeMotion:treeMotion,showTreeIcon:showTreeIcon,switcherIcon:switcherIcon,treeLine:treeLine,treeNodeFilterProp:_props$treeNodeFilter}},React.createElement(RefSelect,(0,_extends2.default)({ref:selectRef,mode:mergedMultiple?"multiple":null},props,dropdownPopupAlign,{value:selectValues,labelInValue:!0,options:mergedTreeData,onChange:null,onSelect:null,onDeselect:null,onDropdownVisibleChange:treeCheckable})))});require=function(_React$Component){function TreeSelect(){(0,_classCallCheck2.default)(this,
TreeSelect);var _this=_super.apply(this,arguments);_this.selectRef=React.createRef();_this.focus=function(){_this.selectRef.current.focus()};_this.blur=function(){_this.selectRef.current.blur()};return _this}(0,_inherits2.default)(TreeSelect,_React$Component);var _super=(0,_createSuper2.default)(TreeSelect);(0,_createClass2.default)(TreeSelect,[{key:"render",value:function(){return React.createElement(RefTreeSelect,(0,_extends2.default)({ref:this.selectRef},this.props))}}]);return TreeSelect}(React.Component);
require.TreeNode=module.default;require.SHOW_ALL=_strategyUtil.SHOW_ALL;require.SHOW_PARENT=_strategyUtil.SHOW_PARENT;require.SHOW_CHILD=_strategyUtil.SHOW_CHILD;exports.default=require}
//# sourceMappingURL=module$node_modules$rc_tree_select$lib$TreeSelect.js.map
