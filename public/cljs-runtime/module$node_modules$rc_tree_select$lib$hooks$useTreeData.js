shadow$provide.module$node_modules$rc_tree_select$lib$hooks$useTreeData=function(global,require,module,exports){function parseSimpleTreeData(treeData,_ref){var id=_ref.id,pId=_ref.pId,rootPId=_ref.rootPId,keyNodes={},rootNodeList=[];treeData.map(function(node){node=(0,_objectSpread2.default)({},node);var key=node[id];keyNodes[key]=node;node.key=node.key||key;return node}).forEach(function(node){var parentKey=node[pId],parent=keyNodes[parentKey];parent&&(parent.children=parent.children||[],parent.children.push(node));
(parentKey===rootPId||!parent&&null===rootPId)&&rootNodeList.push(node)});return rootNodeList}function formatTreeData(treeData,getLabelProp){function dig(dataNodes){return(dataNodes||[]).map(function(node){var key=node.key,value=node.value,children=node.children,rest=(0,_objectWithoutProperties2.default)(node,["key","value","children"]),mergedValue="value"in node?value:key;rest=(0,_objectSpread2.default)((0,_objectSpread2.default)({},rest),{},{key:null!==key&&void 0!==key?key:mergedValue,value:mergedValue,
title:getLabelProp(node)});null!==key&&void 0!==key&&void 0!==value&&String(key)!==String(value)&&warningTimes<MAX_WARNING_TIMES&&(warningTimes+=1,(0,_warning.default)(!1,"`key` or `value` with TreeNode must be the same or you can remove one of them. key: ".concat(key,", value: ").concat(value,".")));(0,_warning.default)(!valueSet.has(value),"Same `value` exist in the tree: ".concat(value));valueSet.add(value);"children"in node&&(rest.children=dig(children));return rest})}var warningTimes=0,valueSet=
new Set;return dig(treeData)}global=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard");module=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports.default=function(treeData,children,_ref2){var getLabelProp=_ref2.getLabelProp;_ref2=_ref2.simpleMode;var cacheRef=React.useRef({});treeData?(cacheRef.current.formatTreeData=cacheRef.current.treeData===treeData?cacheRef.current.formatTreeData:
formatTreeData(_ref2?parseSimpleTreeData(treeData,(0,_objectSpread2.default)({id:"id",pId:"pId",rootPId:null},!0!==_ref2?_ref2:{})):treeData,getLabelProp),cacheRef.current.treeData=treeData):cacheRef.current.formatTreeData=cacheRef.current.children===children?cacheRef.current.formatTreeData:formatTreeData((0,_legacyUtil.convertChildrenToData)(children),getLabelProp);return cacheRef.current.formatTreeData};var _objectWithoutProperties2=module(require("module$node_modules$$babel$runtime$helpers$objectWithoutProperties")),
_objectSpread2=module(require("module$node_modules$$babel$runtime$helpers$objectSpread2")),React=global(require("module$node_modules$react$index")),_warning=module(require("module$node_modules$rc_util$lib$warning")),_legacyUtil=require("module$node_modules$rc_tree_select$lib$utils$legacyUtil"),MAX_WARNING_TIMES=10}
//# sourceMappingURL=module$node_modules$rc_tree_select$lib$hooks$useTreeData.js.map
