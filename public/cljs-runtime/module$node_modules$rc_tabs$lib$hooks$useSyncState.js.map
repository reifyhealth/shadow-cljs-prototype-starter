{
"version":3,
"file":"module$node_modules$rc_tabs$lib$hooks$useSyncState.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,kDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3GC,MAAAA,CAA0BH,OAAA,CAAQ,mEAAR,CAE1BI,OAAAA,CAAyBJ,OAAA,CAAQ,kEAAR,CAE7BK,OAAOC,CAAAA,cAAP,CAAsBJ,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CK,MAAO,CAAA,CADoC,CAA7C,CAGAL,QAAQM,CAAAA,OAAR,CAMAC,QAAqB,CAACC,YAAD,CAAeC,QAAf,CAAyB,CAC5C,IAAIC,SAAWC,KAAMC,CAAAA,MAAN,CAAaJ,YAAb,CAEXK,aAAAA,CAAkBF,KAAMG,CAAAA,QAAN,CAAe,EAAf,CAAtB,KAEIC,YADmBC,CAAC,CAAA,CAAGC,eAAgBX,CAAAA,OAApBU,EAA6BH,YAA7BG;AAA8C,CAA9CA,CACL,CAAiB,CAAjB,CAalB,OAAO,CAACN,QAASQ,CAAAA,OAAV,CAXPC,QAAiB,CAACC,OAAD,CAAU,CACrBC,OAAAA,CAA8B,UAAnB,GAAA,MAAOD,QAAP,CAAgCA,OAAA,CAAQV,QAASQ,CAAAA,OAAjB,CAAhC,CAA4DE,OAEvEC,QAAJ,GAAiBX,QAASQ,CAAAA,OAA1B,EACET,QAAA,CAASY,OAAT,CAAmBX,QAASQ,CAAAA,OAA5B,CAGFR,SAASQ,CAAAA,OAAT,CAAmBG,OACnBN,YAAA,CAAY,EAAZ,CARyB,CAWpB,CAlBqC,CAJ9C,KAAIE,gBAAkBf,MAAA,CAAuBJ,OAAA,CAAQ,0DAAR,CAAvB,CAAtB,CAEIa,MAAQV,MAAA,CAAwBH,OAAA,CAAQ,iCAAR,CAAxB,CAdmG;",
"sources":["node_modules/rc-tabs/lib/hooks/useSyncState.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$rc_tabs$lib$hooks$useSyncState\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useSyncState;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction useSyncState(defaultState, onChange) {\n  var stateRef = React.useRef(defaultState);\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      forceUpdate = _React$useState2[1];\n\n  function setState(updater) {\n    var newValue = typeof updater === 'function' ? updater(stateRef.current) : updater;\n\n    if (newValue !== stateRef.current) {\n      onChange(newValue, stateRef.current);\n    }\n\n    stateRef.current = newValue;\n    forceUpdate({});\n  }\n\n  return [stateRef.current, setState];\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireWildcard","_interopRequireDefault","Object","defineProperty","value","default","useSyncState","defaultState","onChange","stateRef","React","useRef","_React$useState","useState","forceUpdate","_React$useState2","_slicedToArray2","current","setState","updater","newValue"]
}
