{
"version":3,
"file":"module$node_modules$rc_input_number$lib$utils$numberUtil.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiBrHC,QAASA,WAAU,CAACC,MAAD,CAAS,CAC1B,IAAIC,IAAMD,MAAOE,CAAAA,IAAP,EAGV,EAFIC,MAEJ,CAFeF,GAAIG,CAAAA,UAAJ,CAAe,GAAf,CAEf,IACEH,GADF,CACQA,GAAII,CAAAA,KAAJ,CAAU,CAAV,CADR,CAIAJ,IAAA,CAAMA,GACLK,CAAAA,OADK,CACG,gBADH,CACqB,IADrB,CAELA,CAAAA,OAFK,CAEG,OAFH,CAEY,EAFZ,CAGLA,CAAAA,OAHK,CAGG,KAHH,CAGU,EAHV,CAKFL,IAAIG,CAAAA,UAAJ,CAAe,GAAf,CAAJ,GACEH,GADF,CACQ,GAAIM,CAAAA,MAAJ,CAAWN,GAAX,CADR,CAIIO,IAAAA,CAAUP,GAAVO,EAAiB,GACrB,KAAIC,YAAcD,GAAQE,CAAAA,KAAR,CAAc,GAAd,CAAlB,CACIC,WAAaF,WAAA,CAAY,CAAZ,CAAbE,EAA+B,GAC/BC,YAAAA,CAAaH,WAAA,CAAY,CAAZ,CAAbG,EAA+B,GAEhB,IAAnB,GAAID,UAAJ,EAAyC,GAAzC,GAA0BC,WAA1B,GACET,MADF,CACa,CAAA,CADb,CAIA,KAAIU;AAAcV,MAAA,CAAW,GAAX,CAAiB,EACnC,OAAO,CACLA,SAAUA,MADL,CAELU,YAAaA,WAFR,CAGLL,QAASA,GAHJ,CAILG,WAAYA,UAJP,CAKLC,WAAYA,WALP,CAMLE,QAAS,EAAGP,CAAAA,MAAH,CAAUM,WAAV,CAAuBN,CAAAA,MAAvB,CAA8BC,GAA9B,CANJ,CA3BmB,CAqC5BO,QAASA,IAAG,CAACC,MAAD,CAAS,CACff,MAAAA,CAAMgB,MAAA,CAAOD,MAAP,CACV,OAAO,CAACE,MAAOC,CAAAA,KAAP,CAAaD,MAAA,CAAOjB,MAAP,CAAb,CAAR,EAAqCA,MAAImB,CAAAA,QAAJ,CAAa,GAAb,CAFlB,CAUrBC,QAASA,mBAAkB,CAACL,MAAD,CAAS,CAClC,IAAIhB,OAASiB,MAAA,CAAOD,MAAP,CAEb,IAAID,GAAA,CAAIC,MAAJ,CAAJ,CAAiB,CACXM,MAAAA,CAAYJ,MAAA,CAAOlB,MAAOK,CAAAA,KAAP,CAAaL,MAAOuB,CAAAA,OAAP,CAAe,IAAf,CAAb,CAAoC,CAApC,CAAP,CACZC,OAAAA,CAAexB,MAAOyB,CAAAA,KAAP,CAAa,SAAb,CAEnB,IAAqB,IAAjB,GAAAD,MAAA,EAA0C,IAAK,EAA/C,GAAyBA,MAAzB,CAAmD,CAAnD,CAA4DA,MAAA,CAAa,CAAb,CAAhE,CACEF,MAAA,EAAaE,MAAA,CAAa,CAAb,CAAgBE,CAAAA,MAG/B,OAAOJ,OARQ,CAWjB,MAAOtB,OAAOoB,CAAAA,QAAP,CAAgB,GAAhB,CAAA;AAAwBO,cAAA,CAAe3B,MAAf,CAAxB,CAAiDA,MAAO0B,CAAAA,MAAxD,CAAiE1B,MAAOuB,CAAAA,OAAP,CAAe,GAAf,CAAjE,CAAuF,CAAvF,CAA2F,CAdhE,CAuCpCI,QAASA,eAAc,CAACC,GAAD,CAAM,CAC3B,MAAmB,QAAnB,GAAI,MAAOA,IAAX,CACS,CAACV,MAAOC,CAAAA,KAAP,CAAaS,GAAb,CADV,CAKKA,GAAL,CAKE,uBAAwBC,CAAAA,IAAxB,CAA6BD,GAA7B,CALF,EAME,iBAAkBC,CAAAA,IAAlB,CAAuBD,GAAvB,CANF,EAOE,iBAAkBC,CAAAA,IAAlB,CAAuBD,GAAvB,CAPF,CACS,CAAA,CAPkB,CApG7BE,MAAOC,CAAAA,cAAP,CAAsBjC,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CkC,MAAO,CAAA,CADoC,CAA7C,CAGAlC,QAAQC,CAAAA,UAAR,CAAqBA,UACrBD,QAAQiB,CAAAA,GAAR,CAAcA,GACdjB,QAAQuB,CAAAA,kBAAR,CAA6BA,kBAC7BvB,QAAQmC,CAAAA,OAAR,CA4EAA,QAAgB,CAACjB,MAAD,CAAS,CACvB,IAAIhB,OAASiB,MAAA,CAAOD,MAAP,CAEb,IAAID,GAAA,CAAIC,MAAJ,CAAJ,CAAiB,CACf,GAAIA,MAAJ,CAAaE,MAAOgB,CAAAA,gBAApB,CACE,MAAOjB,OAAA,CAAO,CAAC,CAAA;AAAGkB,YAAaC,CAAAA,aAAjB,GAAA,CAAoCC,MAAA,CAAOrB,MAAP,CAAesB,CAAAA,QAAf,EAApC,CAAgEpB,MAAOgB,CAAAA,gBAA9E,CAGT,IAAIlB,MAAJ,CAAaE,MAAOqB,CAAAA,gBAApB,CACE,MAAOtB,OAAA,CAAO,CAAC,CAAA,CAAGkB,YAAaC,CAAAA,aAAjB,GAAA,CAAoCC,MAAA,CAAOrB,MAAP,CAAesB,CAAAA,QAAf,EAApC,CAAgEpB,MAAOqB,CAAAA,gBAA9E,CAGTvC,OAAA,CAASgB,MAAOwB,CAAAA,OAAP,CAAenB,kBAAA,CAAmBrB,MAAnB,CAAf,CATM,CAYjB,MAAOD,WAAA,CAAWC,MAAX,CAAmBc,CAAAA,OAfH,CA3EzBhB,QAAQ6B,CAAAA,cAAR,CAAyBA,cAEzB,KAAIQ,aAAevC,OAAA,CAAQ,2DAAR,CAZkG;",
"sources":["node_modules/rc-input-number/lib/utils/numberUtil.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$rc_input_number$lib$utils$numberUtil\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trimNumber = trimNumber;\nexports.isE = isE;\nexports.getNumberPrecision = getNumberPrecision;\nexports.num2str = num2str;\nexports.validateNumber = validateNumber;\n\nvar _supportUtil = require(\"./supportUtil\");\n\n/**\n * Format string number to readable number\n */\nfunction trimNumber(numStr) {\n  var str = numStr.trim();\n  var negative = str.startsWith('-');\n\n  if (negative) {\n    str = str.slice(1);\n  }\n\n  str = str // Remove decimal 0. `1.000` => `1.`, `1.100` => `1.1`\n  .replace(/(\\.\\d*[^0])0*$/, '$1') // Remove useless decimal. `1.` => `1`\n  .replace(/\\.0*$/, '') // Remove integer 0. `0001` => `1`, 000.1' => `.1`\n  .replace(/^0+/, '');\n\n  if (str.startsWith('.')) {\n    str = \"0\".concat(str);\n  }\n\n  var trimStr = str || '0';\n  var splitNumber = trimStr.split('.');\n  var integerStr = splitNumber[0] || '0';\n  var decimalStr = splitNumber[1] || '0';\n\n  if (integerStr === '0' && decimalStr === '0') {\n    negative = false;\n  }\n\n  var negativeStr = negative ? '-' : '';\n  return {\n    negative: negative,\n    negativeStr: negativeStr,\n    trimStr: trimStr,\n    integerStr: integerStr,\n    decimalStr: decimalStr,\n    fullStr: \"\".concat(negativeStr).concat(trimStr)\n  };\n}\n\nfunction isE(number) {\n  var str = String(number);\n  return !Number.isNaN(Number(str)) && str.includes('e');\n}\n/**\n * [Legacy] Convert 1e-9 to 0.000000001.\n * This may lose some precision if user really want 1e-9.\n */\n\n\nfunction getNumberPrecision(number) {\n  var numStr = String(number);\n\n  if (isE(number)) {\n    var precision = Number(numStr.slice(numStr.indexOf('e-') + 2));\n    var decimalMatch = numStr.match(/\\.(\\d+)/);\n\n    if (decimalMatch === null || decimalMatch === void 0 ? void 0 : decimalMatch[1]) {\n      precision += decimalMatch[1].length;\n    }\n\n    return precision;\n  }\n\n  return numStr.includes('.') && validateNumber(numStr) ? numStr.length - numStr.indexOf('.') - 1 : 0;\n}\n/**\n * Convert number (includes scientific notation) to -xxx.yyy format\n */\n\n\nfunction num2str(number) {\n  var numStr = String(number);\n\n  if (isE(number)) {\n    if (number > Number.MAX_SAFE_INTEGER) {\n      return String((0, _supportUtil.supportBigInt)() ? BigInt(number).toString() : Number.MAX_SAFE_INTEGER);\n    }\n\n    if (number < Number.MIN_SAFE_INTEGER) {\n      return String((0, _supportUtil.supportBigInt)() ? BigInt(number).toString() : Number.MIN_SAFE_INTEGER);\n    }\n\n    numStr = number.toFixed(getNumberPrecision(numStr));\n  }\n\n  return trimNumber(numStr).fullStr;\n}\n\nfunction validateNumber(num) {\n  if (typeof num === 'number') {\n    return !Number.isNaN(num);\n  } // Empty\n\n\n  if (!num) {\n    return false;\n  }\n\n  return (// Normal type: 11.28\n    /^\\s*-?\\d+(\\.\\d+)?\\s*$/.test(num) || // Pre-number: 1.\n    /^\\s*-?\\d+\\.\\s*$/.test(num) || // Post-number: .1\n    /^\\s*-?\\.\\d+\\s*$/.test(num)\n  );\n}\n};"],
"names":["shadow$provide","global","require","module","exports","trimNumber","numStr","str","trim","negative","startsWith","slice","replace","concat","trimStr","splitNumber","split","integerStr","decimalStr","negativeStr","fullStr","isE","number","String","Number","isNaN","includes","getNumberPrecision","precision","indexOf","decimalMatch","match","length","validateNumber","num","test","Object","defineProperty","value","num2str","MAX_SAFE_INTEGER","_supportUtil","supportBigInt","BigInt","toString","MIN_SAFE_INTEGER","toFixed"]
}
