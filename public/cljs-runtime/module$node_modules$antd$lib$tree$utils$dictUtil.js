shadow$provide.module$node_modules$antd$lib$tree$utils$dictUtil=function(global,require,module,exports){function traverseNodesKey(treeData,callback){treeData.forEach(function(dataNode){var children=dataNode.children;!1!==callback(dataNode.key,dataNode)&&traverseNodesKey(children||[],callback)})}global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports.calcRangeKeys=function(_ref){var expandedKeys=_ref.expandedKeys,
startKey=_ref.startKey,endKey=_ref.endKey,keys=[],record=Record.None;if(startKey&&startKey===endKey)return[startKey];if(!startKey||!endKey)return[];traverseNodesKey(_ref.treeData,function(key){if(record===Record.End)return!1;if(key===startKey||key===endKey)if(keys.push(key),record===Record.None)record=Record.Start;else{if(record===Record.Start)return record=Record.End,!1}else record===Record.Start&&keys.push(key);return-1===expandedKeys.indexOf(key)?!1:!0});return keys};exports.convertDirectoryKeysToNodes=
function(treeData,keys){var restKeys=(0,_toConsumableArray2["default"])(keys),nodes=[];traverseNodesKey(treeData,function(key,node){key=restKeys.indexOf(key);-1!==key&&(nodes.push(node),restKeys.splice(key,1));return!!restKeys.length});return nodes};var _toConsumableArray2=global(require("module$node_modules$$babel$runtime$helpers$toConsumableArray")),Record;(function(Record){Record[Record.None=0]="None";Record[Record.Start=1]="Start";Record[Record.End=2]="End"})(Record||(Record={}))}
//# sourceMappingURL=module$node_modules$antd$lib$tree$utils$dictUtil.js.map
