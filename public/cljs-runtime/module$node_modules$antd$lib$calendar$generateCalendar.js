shadow$provide.module$node_modules$antd$lib$calendar$generateCalendar=function(global,require,module,exports){global=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard");module=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports["default"]=void 0;var _defineProperty2=module(require("module$node_modules$$babel$runtime$helpers$defineProperty")),_extends2=module(require("module$node_modules$$babel$runtime$helpers$extends")),
_slicedToArray2=module(require("module$node_modules$$babel$runtime$helpers$slicedToArray")),React=global(require("module$node_modules$react$index")),_useMergedState5=module(require("module$node_modules$rc_util$lib$hooks$useMergedState")),_classnames=module(require("module$node_modules$classnames$index")),_padStart=module(require("module$node_modules$lodash$padStart")),_rcPicker=require("module$node_modules$rc_picker$lib$index"),_LocaleReceiver=module(require("module$node_modules$antd$lib$locale_provider$LocaleReceiver")),
_en_US=module(require("module$node_modules$antd$lib$calendar$locale$en_US")),_configProvider=require("module$node_modules$antd$lib$config_provider$index"),_Header=module(require("module$node_modules$antd$lib$calendar$Header"));exports["default"]=function(generateConfig){function isSameYear(date1,date2){return date1&&date2&&generateConfig.getYear(date1)===generateConfig.getYear(date2)}function isSameMonth(date1,date2){return isSameYear(date1,date2)&&generateConfig.getMonth(date1)===generateConfig.getMonth(date2)}
function isSameDate(date1,date2){return isSameMonth(date1,date2)&&generateConfig.getDate(date1)===generateConfig.getDate(date2)}return function(props){var customizePrefixCls=props.prefixCls,className=props.className,style=props.style,dateFullCellRender=props.dateFullCellRender,dateCellRender=props.dateCellRender,monthFullCellRender=props.monthFullCellRender,monthCellRender=props.monthCellRender,headerRender=props.headerRender,value=props.value,defaultValue=props.defaultValue,disabledDate=props.disabledDate,
mode=props.mode,validRange=props.validRange,_props$fullscreen=props.fullscreen,fullscreen=void 0===_props$fullscreen?!0:_props$fullscreen,onChange=props.onChange,onPanelChange=props.onPanelChange,onSelect=props.onSelect;_props$fullscreen=React.useContext(_configProvider.ConfigContext);var getPrefixCls=_props$fullscreen.getPrefixCls,direction=_props$fullscreen.direction,prefixCls=getPrefixCls("picker",customizePrefixCls),calendarPrefixCls="".concat(prefixCls,"-calendar"),today=generateConfig.getNow();
customizePrefixCls=(0,_useMergedState5["default"])(function(){return value||generateConfig.getNow()},{defaultValue:defaultValue,value:value});customizePrefixCls=(0,_slicedToArray2["default"])(customizePrefixCls,2);var mergedValue=customizePrefixCls[0],setMergedValue=customizePrefixCls[1];mode=(0,_useMergedState5["default"])("month",{value:mode});mode=(0,_slicedToArray2["default"])(mode,2);var mergedMode=mode[0],setMergedMode=mode[1],panelMode=React.useMemo(function(){return"year"===mergedMode?"month":
"date"},[mergedMode]),mergedDisabledDate=React.useCallback(function(date){return(validRange?generateConfig.isAfter(validRange[0],date)||generateConfig.isAfter(date,validRange[1]):!1)||!(null===disabledDate||void 0===disabledDate||!disabledDate(date))},[disabledDate,validRange]),triggerPanelChange=function(date,newMode){null===onPanelChange||void 0===onPanelChange?void 0:onPanelChange(date,newMode)},triggerModeChange=function(newMode){setMergedMode(newMode);triggerPanelChange(mergedValue,newMode)},
onInternalSelect=function(date){setMergedValue(date);isSameDate(date,mergedValue)||(("date"===panelMode&&!isSameMonth(date,mergedValue)||"month"===panelMode&&!isSameYear(date,mergedValue))&&triggerPanelChange(date,mergedMode),null===onChange||void 0===onChange?void 0:onChange(date));null===onSelect||void 0===onSelect?void 0:onSelect(date)},dateRender=React.useCallback(function(date){return dateFullCellRender?dateFullCellRender(date):React.createElement("div",{className:(0,_classnames["default"])("".concat(prefixCls,
"-cell-inner"),"".concat(calendarPrefixCls,"-date"),(0,_defineProperty2["default"])({},"".concat(calendarPrefixCls,"-date-today"),isSameDate(today,date)))},React.createElement("div",{className:"".concat(calendarPrefixCls,"-date-value")},(0,_padStart["default"])(String(generateConfig.getDate(date)),2,"0")),React.createElement("div",{className:"".concat(calendarPrefixCls,"-date-content")},dateCellRender&&dateCellRender(date)))},[dateFullCellRender,dateCellRender]),monthRender=React.useCallback(function(date,
locale){if(monthFullCellRender)return monthFullCellRender(date);locale=locale.shortMonths||generateConfig.locale.getShortMonths(locale.locale);return React.createElement("div",{className:(0,_classnames["default"])("".concat(prefixCls,"-cell-inner"),"".concat(calendarPrefixCls,"-date"),(0,_defineProperty2["default"])({},"".concat(calendarPrefixCls,"-date-today"),isSameMonth(today,date)))},React.createElement("div",{className:"".concat(calendarPrefixCls,"-date-value")},locale[generateConfig.getMonth(date)]),
React.createElement("div",{className:"".concat(calendarPrefixCls,"-date-content")},monthCellRender&&monthCellRender(date)))},[monthFullCellRender,monthCellRender]);return React.createElement(_LocaleReceiver["default"],{componentName:"Calendar",defaultLocale:function(){var locale=props.locale,result=(0,_extends2["default"])((0,_extends2["default"])({},_en_US["default"]),locale);result.lang=(0,_extends2["default"])((0,_extends2["default"])({},result.lang),(locale||{}).lang);return result}},function(mergedLocale){var _classNames3;
return React.createElement("div",{className:(0,_classnames["default"])(calendarPrefixCls,(_classNames3={},(0,_defineProperty2["default"])(_classNames3,"".concat(calendarPrefixCls,"-full"),fullscreen),(0,_defineProperty2["default"])(_classNames3,"".concat(calendarPrefixCls,"-mini"),!fullscreen),(0,_defineProperty2["default"])(_classNames3,"".concat(calendarPrefixCls,"-rtl"),"rtl"===direction),_classNames3),className),style:style},headerRender?headerRender({value:mergedValue,type:mergedMode,onChange:onInternalSelect,
onTypeChange:triggerModeChange}):React.createElement(_Header["default"],{prefixCls:calendarPrefixCls,value:mergedValue,generateConfig:generateConfig,mode:mergedMode,fullscreen:fullscreen,locale:mergedLocale.lang,validRange:validRange,onChange:onInternalSelect,onModeChange:triggerModeChange}),React.createElement(_rcPicker.PickerPanel,{value:mergedValue,prefixCls:prefixCls,locale:mergedLocale.lang,generateConfig:generateConfig,dateRender:dateRender,monthCellRender:function(date){return monthRender(date,
mergedLocale.lang)},onSelect:onInternalSelect,mode:panelMode,picker:panelMode,disabledDate:mergedDisabledDate,hideHeader:!0}))})}}}
//# sourceMappingURL=module$node_modules$antd$lib$calendar$generateCalendar.js.map
