// display classes
@each $display-type in flex, inline-flex, block, inline, inline-block {
  .display-#{$display-type} {
    @if $display-type == "flex" {
      display: -ms-flexbox;
      display: flex;
    }
    @else if $display-type == "inline-flex" {
      display: -ms-inline-flexbox;
      display: inline-flex;
    }
    @else {
      display: $display-type;
    }
  }
}

// 12 Column Grid
.display-row {
  display: flex;
  flex-direction: row;

  .display-col { flex: 1 1 auto; }

  @for $i from 1 through $grid-columns {
    .display-col-#{$i} {
      width: percentage($i / $grid-columns);
    }
  }
}

// Flex classes
@each $type in grow, shrink {
  @each $val in 1, 0 {
    .flex-#{$type}-#{$val} {
      flex-#{$type}: $val;
    }
  }
}

// align+justify classes
@each $align-type in flex-start, flex-end, center, baseline, stretch {
  .align-items-#{$align-type} {
    align-items: $align-type;
  }
}

@each $align-type in flex-start, flex-end, center, space-between, space-around {
  .justify-#{$align-type} {
    justify-content: $align-type;
  }
}

// z-index
@each $space in 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 {
  .z-index-#{$space} { z-index: $space; }
}

// padding+margin by numbers 0 10 20 .. 100
// example: margin-top-10, margin-50
@each $type in padding, margin {
  @each $num in $margin-and-padding-breaks {
    @each $side in top, right, bottom, left {
      .#{$type}-#{$side}-#{$num} {
        #{$type}-#{$side}: rem($num);
      }
    }

    .#{$type}-#{$num} {
      #{$type}: rem($num);
    }
  }
}

// padding+margin by size sm, md .. xl
// example: margin-top-sm, margin-xl
@each $type in padding, margin {
  @each $size, $val in $sizing-breaks {
    @each $side in top, right, bottom, left {
      .#{$type}-#{$side}-#{$size} {
        #{$type}-#{$side}: rem($val);
      }
    }

    .#{$type}-#{$size} {
      #{$type}: rem($val);
    }
  }
}
